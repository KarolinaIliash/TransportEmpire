// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ENTITY_ODB_H
#define ENTITY_ODB_H

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/mssql/qstring-traits.hxx>
#include <odb/qt/basic/mssql/qbyte-array-traits.hxx>
#include <odb/qt/basic/mssql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/mssql/qdate-traits.hxx>
#include <odb/qt/date-time/mssql/qtime-traits.hxx>
#include <odb/qt/date-time/mssql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Database/Entity.h"

#include <memory>
#include <cstddef>
#include <string>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/polymorphic-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Entity
  //
  template <>
  struct class_traits< ::db::Entity >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::db::Entity >
  {
    public:
    typedef ::db::Entity object_type;
    typedef ::QSharedPointer< ::db::Entity > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::db::Entity root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;

    static const std::size_t depth = 1UL;

    typedef unsigned int id_type;
    typedef unsigned int version_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // Entity
  //
  template <typename A>
  struct query_columns< ::db::Entity, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;

    // version
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        unsigned int,
        mssql::id_int >::query_type,
      mssql::id_int >
    version_type_;

    static const version_type_ version;
  };

  template <typename A>
  const typename query_columns< ::db::Entity, id_mssql, A >::id_type_
  query_columns< ::db::Entity, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::db::Entity, id_mssql, A >::typeid__type_
  query_columns< ::db::Entity, id_mssql, A >::
  typeid_ (A::table_name, "[typeid]", 0, 256);

  template <typename A>
  const typename query_columns< ::db::Entity, id_mssql, A >::version_type_
  query_columns< ::db::Entity, id_mssql, A >::
  version (A::table_name, "[version]", 0);

  template <typename A>
  struct pointer_query_columns< ::db::Entity, id_mssql, A >:
    query_columns< ::db::Entity, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::db::Entity, id_mssql >:
    public access::object_traits< ::db::Entity >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    typedef polymorphic_entry<object_type, id_mssql> entry_type;
    typedef object_traits_impl<root_type, id_mssql> root_traits;

    struct discriminator_image_type
    {
      char discriminator_value[257];
      SQLLEN discriminator_size_ind;

      int version_value;
      SQLLEN version_size_ind;

      std::size_t version;
    };

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      int version_value;
      SQLLEN version_size_ind;

      std::size_t version;
    };

    static map_type* map;
    static const info_type info;

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // typeid_
      //
      char typeid_value[257];
      SQLLEN typeid_size_ind;

      // version
      //
      int version_value;
      SQLLEN version_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static version_type
    version (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&, bool bind_version = true);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&, const version_type* = 0);

    typedef
    mssql::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 1UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char optimistic_erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*,
                    version_type* = 0);

    static root_traits::image_type&
    root_image (image_type&);

    static image_type*
    clone_image (image_type&);

    static void
    copy_image (image_type&, image_type&);

    static void
    free_image (image_type*);
  };

  template <>
  class access::object_traits_impl< ::db::Entity, id_common >:
    public access::object_traits_impl< ::db::Entity, id_mssql >
  {
  };

  // Entity
  //
}

#include "Entity-odb-inl.h"

#include <odb/post.hxx>

#endif // ENTITY_ODB_H
