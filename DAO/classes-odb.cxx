// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "classes-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mssql/traits.hxx>
#include <odb/mssql/database.hxx>
#include <odb/mssql/transaction.hxx>
#include <odb/mssql/connection.hxx>
#include <odb/mssql/statement.hxx>
#include <odb/mssql/statement-cache.hxx>
#include <odb/mssql/simple-object-statements.hxx>
#include <odb/mssql/container-statements.hxx>
#include <odb/mssql/exceptions.hxx>
#include <odb/mssql/simple-object-result.hxx>

namespace odb
{
  // DBBusTypeInfo
  //

  struct access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::id_type
  access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // brand
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.brand_value;
    b[n].size_ind = &i.brand_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.brand_value));
    n++;

    // model
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.model_value;
    b[n].size_ind = &i.model_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.model_value));
    n++;

    // fuel_consumption
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.fuel_consumption_value;
    b[n].size_ind = &i.fuel_consumption_size_ind;
    n++;

    // comfort_level
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.comfort_level_value;
    b[n].size_ind = &i.comfort_level_size_ind;
    n++;
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // brand
    //
    {
      ::QString const& v =
        o.brand;

      bool is_null (true);
      std::size_t size (0);
      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_image (
        i.brand_value,
        sizeof (i.brand_value) - 1,
        size,
        is_null,
        v);
      i.brand_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // model
    //
    {
      ::QString const& v =
        o.model;

      bool is_null (true);
      std::size_t size (0);
      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_image (
        i.model_value,
        sizeof (i.model_value) - 1,
        size,
        is_null,
        v);
      i.model_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // fuel_consumption
    //
    {
      ::quint32 const& v =
        o.fuel_consumption;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.fuel_consumption_value, is_null, v);
      i.fuel_consumption_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // comfort_level
    //
    {
      ::quint32 const& v =
        o.comfort_level;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.comfort_level_value, is_null, v);
      i.comfort_level_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // brand
    //
    {
      ::QString& v =
        o.brand;

      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_value (
        v,
        i.brand_value,
        static_cast<std::size_t> (i.brand_size_ind),
        i.brand_size_ind == SQL_NULL_DATA);
    }

    // model
    //
    {
      ::QString& v =
        o.model;

      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_value (
        v,
        i.model_value,
        static_cast<std::size_t> (i.model_size_ind),
        i.model_size_ind == SQL_NULL_DATA);
    }

    // fuel_consumption
    //
    {
      ::quint32& v =
        o.fuel_consumption;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.fuel_consumption_value,
        i.fuel_consumption_size_ind == SQL_NULL_DATA);
    }

    // comfort_level
    //
    {
      ::quint32& v =
        o.comfort_level;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.comfort_level_value,
        i.comfort_level_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::persist_statement[] =
  "INSERT INTO [DBBusTypeInfo] "
  "([id], "
  "[brand], "
  "[model], "
  "[fuel_consumption], "
  "[comfort_level]) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::find_statement[] =
  "SELECT "
  "[DBBusTypeInfo].[id], "
  "[DBBusTypeInfo].[brand], "
  "[DBBusTypeInfo].[model], "
  "[DBBusTypeInfo].[fuel_consumption], "
  "[DBBusTypeInfo].[comfort_level] "
  "FROM [DBBusTypeInfo] "
  "WHERE [DBBusTypeInfo].[id]=?";

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::update_statement[] =
  "UPDATE [DBBusTypeInfo] "
  "SET "
  "[brand]=?, "
  "[model]=?, "
  "[fuel_consumption]=?, "
  "[comfort_level]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::erase_statement[] =
  "DELETE FROM [DBBusTypeInfo] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::query_statement[] =
  "SELECT "
  "[DBBusTypeInfo].[id], "
  "[DBBusTypeInfo].[brand], "
  "[DBBusTypeInfo].[model], "
  "[DBBusTypeInfo].[fuel_consumption], "
  "[DBBusTypeInfo].[comfort_level] "
  "FROM [DBBusTypeInfo]";

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBBusTypeInfo]";

  const char access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::table_name[] =
  "[DBBusTypeInfo]";

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::pointer_type
  access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::object_type >
  access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBBusTypeInfo, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBBusState
  //

  struct access::object_traits_impl< ::DBBusState, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBBusState, id_mssql >::id_type
  access::object_traits_impl< ::DBBusState, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // durability
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.durability_value;
    b[n].size_ind = &i.durability_size_ind;
    n++;

    // last_technical_inspection_date
    //
    b[n].type = mssql::bind::date;
    b[n].buffer = &i.last_technical_inspection_date_value;
    b[n].size_ind = &i.last_technical_inspection_date_size_ind;
    n++;

    // next_technical_inspection_date
    //
    b[n].type = mssql::bind::date;
    b[n].buffer = &i.next_technical_inspection_date_value;
    b[n].size_ind = &i.next_technical_inspection_date_size_ind;
    n++;

    // is_avalible
    //
    b[n].type = mssql::bind::bit;
    b[n].buffer = &i.is_avalible_value;
    b[n].size_ind = &i.is_avalible_size_ind;
    n++;
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // durability
    //
    {
      ::quint32 const& v =
        o.durability;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.durability_value, is_null, v);
      i.durability_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // last_technical_inspection_date
    //
    {
      ::QDate const& v =
        o.last_technical_inspection_date;

      bool is_null (true);
      mssql::value_traits<
          ::QDate,
          mssql::id_date >::set_image (
        i.last_technical_inspection_date_value, is_null, v);
      i.last_technical_inspection_date_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // next_technical_inspection_date
    //
    {
      ::QDate const& v =
        o.next_technical_inspection_date;

      bool is_null (true);
      mssql::value_traits<
          ::QDate,
          mssql::id_date >::set_image (
        i.next_technical_inspection_date_value, is_null, v);
      i.next_technical_inspection_date_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // is_avalible
    //
    {
      bool const& v =
        o.is_avalible;

      bool is_null (false);
      mssql::value_traits<
          bool,
          mssql::id_bit >::set_image (
        i.is_avalible_value, is_null, v);
      i.is_avalible_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // durability
    //
    {
      ::quint32& v =
        o.durability;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.durability_value,
        i.durability_size_ind == SQL_NULL_DATA);
    }

    // last_technical_inspection_date
    //
    {
      ::QDate& v =
        o.last_technical_inspection_date;

      mssql::value_traits<
          ::QDate,
          mssql::id_date >::set_value (
        v,
        i.last_technical_inspection_date_value,
        i.last_technical_inspection_date_size_ind == SQL_NULL_DATA);
    }

    // next_technical_inspection_date
    //
    {
      ::QDate& v =
        o.next_technical_inspection_date;

      mssql::value_traits<
          ::QDate,
          mssql::id_date >::set_value (
        v,
        i.next_technical_inspection_date_value,
        i.next_technical_inspection_date_size_ind == SQL_NULL_DATA);
    }

    // is_avalible
    //
    {
      bool& v =
        o.is_avalible;

      mssql::value_traits<
          bool,
          mssql::id_bit >::set_value (
        v,
        i.is_avalible_value,
        i.is_avalible_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBBusState, id_mssql >::persist_statement[] =
  "INSERT INTO [DBBusState] "
  "([id], "
  "[durability], "
  "[last_technical_inspection_date], "
  "[next_technical_inspection_date], "
  "[is_avalible]) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBBusState, id_mssql >::find_statement[] =
  "SELECT "
  "[DBBusState].[id], "
  "[DBBusState].[durability], "
  "[DBBusState].[last_technical_inspection_date], "
  "[DBBusState].[next_technical_inspection_date], "
  "[DBBusState].[is_avalible] "
  "FROM [DBBusState] "
  "WHERE [DBBusState].[id]=?";

  const char access::object_traits_impl< ::DBBusState, id_mssql >::update_statement[] =
  "UPDATE [DBBusState] "
  "SET "
  "[durability]=?, "
  "[last_technical_inspection_date]=?, "
  "[next_technical_inspection_date]=?, "
  "[is_avalible]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBBusState, id_mssql >::erase_statement[] =
  "DELETE FROM [DBBusState] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBBusState, id_mssql >::query_statement[] =
  "SELECT "
  "[DBBusState].[id], "
  "[DBBusState].[durability], "
  "[DBBusState].[last_technical_inspection_date], "
  "[DBBusState].[next_technical_inspection_date], "
  "[DBBusState].[is_avalible] "
  "FROM [DBBusState]";

  const char access::object_traits_impl< ::DBBusState, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBBusState]";

  const char access::object_traits_impl< ::DBBusState, id_mssql >::table_name[] =
  "[DBBusState]";

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBBusState, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBBusState, id_mssql >::pointer_type
  access::object_traits_impl< ::DBBusState, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBBusState, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBBusState, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBBusState, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBBusState, id_mssql >::object_type >
  access::object_traits_impl< ::DBBusState, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBBusState, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBBus
  //

  const char alias_traits<  ::DBBusTypeInfo,
    id_mssql,
    access::object_traits_impl< ::DBBus, id_mssql >::info_tag>::
  table_name[] = "[info]";

  const char alias_traits<  ::DBBusState,
    id_mssql,
    access::object_traits_impl< ::DBBus, id_mssql >::state_tag>::
  table_name[] = "[state]";

  struct access::object_traits_impl< ::DBBus, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBBus, id_mssql >::id_type
  access::object_traits_impl< ::DBBus, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // info
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.info_value;
    b[n].size_ind = &i.info_size_ind;
    n++;

    // state
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.state_value;
    b[n].size_ind = &i.state_size_ind;
    n++;

    // purchase_date
    //
    b[n].type = mssql::bind::date;
    b[n].buffer = &i.purchase_date_value;
    b[n].size_ind = &i.purchase_date_size_ind;
    n++;
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // info
    //
    {
      ::QSharedPointer< ::DBBusTypeInfo > const& v =
        o.info;

      typedef object_traits< ::DBBusTypeInfo > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBusTypeInfo > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.info_value, is_null, id);
        i.info_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        throw null_pointer ();
    }

    // state
    //
    {
      ::QSharedPointer< ::DBBusState > const& v =
        o.state;

      typedef object_traits< ::DBBusState > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBusState > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.state_value, is_null, id);
        i.state_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        throw null_pointer ();
    }

    // purchase_date
    //
    {
      ::QDate const& v =
        o.purchase_date;

      bool is_null (true);
      mssql::value_traits<
          ::QDate,
          mssql::id_date >::set_image (
        i.purchase_date_value, is_null, v);
      i.purchase_date_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // info
    //
    {
      ::QSharedPointer< ::DBBusTypeInfo >& v =
        o.info;

      typedef object_traits< ::DBBusTypeInfo > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBusTypeInfo > > ptr_traits;

      if (i.info_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.info_value,
          i.info_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // state
    //
    {
      ::QSharedPointer< ::DBBusState >& v =
        o.state;

      typedef object_traits< ::DBBusState > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBusState > > ptr_traits;

      if (i.state_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.state_value,
          i.state_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // purchase_date
    //
    {
      ::QDate& v =
        o.purchase_date;

      mssql::value_traits<
          ::QDate,
          mssql::id_date >::set_value (
        v,
        i.purchase_date_value,
        i.purchase_date_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBBus, id_mssql >::persist_statement[] =
  "INSERT INTO [DBBus] "
  "([id], "
  "[info], "
  "[state], "
  "[purchase_date]) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBBus, id_mssql >::find_statement[] =
  "SELECT "
  "[DBBus].[id], "
  "[DBBus].[info], "
  "[DBBus].[state], "
  "[DBBus].[purchase_date] "
  "FROM [DBBus] "
  "WHERE [DBBus].[id]=?";

  const char access::object_traits_impl< ::DBBus, id_mssql >::update_statement[] =
  "UPDATE [DBBus] "
  "SET "
  "[info]=?, "
  "[state]=?, "
  "[purchase_date]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBBus, id_mssql >::erase_statement[] =
  "DELETE FROM [DBBus] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBBus, id_mssql >::query_statement[] =
  "SELECT\n"
  "[DBBus].[id],\n"
  "[DBBus].[info],\n"
  "[DBBus].[state],\n"
  "[DBBus].[purchase_date]\n"
  "FROM [DBBus]\n"
  "LEFT JOIN [DBBusTypeInfo] AS [info] ON [info].[id]=[DBBus].[info]\n"
  "LEFT JOIN [DBBusState] AS [state] ON [state].[id]=[DBBus].[state]";

  const char access::object_traits_impl< ::DBBus, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBBus]";

  const char access::object_traits_impl< ::DBBus, id_mssql >::table_name[] =
  "[DBBus]";

  void access::object_traits_impl< ::DBBus, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBBus, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBBus, id_mssql >::pointer_type
  access::object_traits_impl< ::DBBus, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBBus, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBBus, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBBus, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBBus, id_mssql >::object_type >
  access::object_traits_impl< ::DBBus, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBBus, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBCity
  //

  struct access::object_traits_impl< ::DBCity, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBCity, id_mssql >::id_type
  access::object_traits_impl< ::DBCity, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // name
    //
    b[n].type = mssql::bind::string;
    b[n].buffer = &i.name_value;
    b[n].size_ind = &i.name_size_ind;
    b[n].capacity = static_cast<SQLLEN> (sizeof (i.name_value));
    n++;

    // population
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.population_value;
    b[n].size_ind = &i.population_size_ind;
    n++;

    // location_x
    //
    b[n].type = mssql::bind::float4;
    b[n].buffer = &i.location_x_value;
    b[n].size_ind = &i.location_x_size_ind;
    b[n].capacity = 24;
    n++;

    // location_y
    //
    b[n].type = mssql::bind::float4;
    b[n].buffer = &i.location_y_value;
    b[n].size_ind = &i.location_y_size_ind;
    b[n].capacity = 24;
    n++;
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // name
    //
    {
      ::QString const& v =
        o.name;

      bool is_null (true);
      std::size_t size (0);
      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_image (
        i.name_value,
        sizeof (i.name_value) - 1,
        size,
        is_null,
        v);
      i.name_size_ind =
        is_null ? SQL_NULL_DATA : static_cast<SQLLEN> (size);
    }

    // population
    //
    {
      ::quint32 const& v =
        o.population;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.population_value, is_null, v);
      i.population_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // location_x
    //
    {
      float const& v =
        o.location_x;

      bool is_null (false);
      mssql::value_traits<
          float,
          mssql::id_float4 >::set_image (
        i.location_x_value, is_null, v);
      i.location_x_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // location_y
    //
    {
      float const& v =
        o.location_y;

      bool is_null (false);
      mssql::value_traits<
          float,
          mssql::id_float4 >::set_image (
        i.location_y_value, is_null, v);
      i.location_y_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // name
    //
    {
      ::QString& v =
        o.name;

      mssql::value_traits<
          ::QString,
          mssql::id_string >::set_value (
        v,
        i.name_value,
        static_cast<std::size_t> (i.name_size_ind),
        i.name_size_ind == SQL_NULL_DATA);
    }

    // population
    //
    {
      ::quint32& v =
        o.population;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.population_value,
        i.population_size_ind == SQL_NULL_DATA);
    }

    // location_x
    //
    {
      float& v =
        o.location_x;

      mssql::value_traits<
          float,
          mssql::id_float4 >::set_value (
        v,
        i.location_x_value,
        i.location_x_size_ind == SQL_NULL_DATA);
    }

    // location_y
    //
    {
      float& v =
        o.location_y;

      mssql::value_traits<
          float,
          mssql::id_float4 >::set_value (
        v,
        i.location_y_value,
        i.location_y_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBCity, id_mssql >::persist_statement[] =
  "INSERT INTO [DBCity] "
  "([id], "
  "[name], "
  "[population], "
  "[location_x], "
  "[location_y]) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBCity, id_mssql >::find_statement[] =
  "SELECT "
  "[DBCity].[id], "
  "[DBCity].[name], "
  "[DBCity].[population], "
  "[DBCity].[location_x], "
  "[DBCity].[location_y] "
  "FROM [DBCity] "
  "WHERE [DBCity].[id]=?";

  const char access::object_traits_impl< ::DBCity, id_mssql >::update_statement[] =
  "UPDATE [DBCity] "
  "SET "
  "[name]=?, "
  "[population]=?, "
  "[location_x]=?, "
  "[location_y]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBCity, id_mssql >::erase_statement[] =
  "DELETE FROM [DBCity] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBCity, id_mssql >::query_statement[] =
  "SELECT "
  "[DBCity].[id], "
  "[DBCity].[name], "
  "[DBCity].[population], "
  "[DBCity].[location_x], "
  "[DBCity].[location_y] "
  "FROM [DBCity]";

  const char access::object_traits_impl< ::DBCity, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBCity]";

  const char access::object_traits_impl< ::DBCity, id_mssql >::table_name[] =
  "[DBCity]";

  void access::object_traits_impl< ::DBCity, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBCity, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBCity, id_mssql >::pointer_type
  access::object_traits_impl< ::DBCity, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBCity, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBCity, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBCity, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBCity, id_mssql >::object_type >
  access::object_traits_impl< ::DBCity, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBCity, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBPath
  //

  struct access::object_traits_impl< ::DBPath, id_mssql >::extra_statement_cache_type
  {
    mssql::container_statements_impl< cities_traits > cities;

    extra_statement_cache_type (
      mssql::connection& c,
      image_type&,
      id_image_type&,
      mssql::binding& id,
      mssql::binding&)
    : cities (c, id)
    {
    }
  };

  // cities
  //

  const char access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  select_statement[] =
  "SELECT "
  "[DBPath_cities].[index], "
  "[DBPath_cities].[value] "
  "FROM [DBPath_cities] "
  "WHERE [DBPath_cities].[object_id]=? ORDER BY [DBPath_cities].[index]";

  const char access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  insert_statement[] =
  "INSERT INTO [DBPath_cities] "
  "([object_id], "
  "[index], "
  "[value]) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  delete_statement[] =
  "DELETE FROM [DBPath_cities] "
  "WHERE [object_id]=?";

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  bind (mssql::bind* b,
        const mssql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mssql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &d.index_value;
    b[n].size_ind = &d.index_size_ind;
    n++;

    // value
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &d.value_value;
    b[n].size_ind = &d.value_size_ind;
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace mssql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      mssql::value_traits<
          index_type,
          mssql::id_int >::set_image (
        i.index_value, is_null, *j);
      i.index_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // value
    //
    {
      typedef object_traits< ::DBCity > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.value_value, is_null, id);
        i.value_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.value_size_ind = SQL_NULL_DATA;
    }
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      mssql::value_traits<
          index_type,
          mssql::id_int >::set_value (
        j,
        i.index_value,
        i.index_size_ind == SQL_NULL_DATA);
    }

    // value
    //
    {
      typedef object_traits< ::DBCity > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.value_value,
          i.value_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace mssql;
    using mssql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    sts.select_statement ().stream_result ();

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  delete_ (void* d)
  {
    using namespace mssql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mssql;
    using mssql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::cities_traits::
  erase (statements_type& sts)
  {
    using namespace mssql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::DBPath, id_mssql >::id_type
  access::object_traits_impl< ::DBPath, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // quality_level
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.quality_level_value;
    b[n].size_ind = &i.quality_level_size_ind;
    n++;

    // milage
    //
    b[n].type = mssql::bind::float8;
    b[n].buffer = &i.milage_value;
    b[n].size_ind = &i.milage_size_ind;
    b[n].capacity = 53;
    n++;
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // quality_level
    //
    {
      ::qint32 const& v =
        o.quality_level;

      bool is_null (false);
      mssql::value_traits<
          ::qint32,
          mssql::id_int >::set_image (
        i.quality_level_value, is_null, v);
      i.quality_level_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // milage
    //
    {
      double const& v =
        o.milage;

      bool is_null (false);
      mssql::value_traits<
          double,
          mssql::id_float8 >::set_image (
        i.milage_value, is_null, v);
      i.milage_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // quality_level
    //
    {
      ::qint32& v =
        o.quality_level;

      mssql::value_traits<
          ::qint32,
          mssql::id_int >::set_value (
        v,
        i.quality_level_value,
        i.quality_level_size_ind == SQL_NULL_DATA);
    }

    // milage
    //
    {
      double& v =
        o.milage;

      mssql::value_traits<
          double,
          mssql::id_float8 >::set_value (
        v,
        i.milage_value,
        i.milage_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBPath, id_mssql >::persist_statement[] =
  "INSERT INTO [DBPath] "
  "([id], "
  "[quality_level], "
  "[milage]) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::DBPath, id_mssql >::find_statement[] =
  "SELECT "
  "[DBPath].[id], "
  "[DBPath].[quality_level], "
  "[DBPath].[milage] "
  "FROM [DBPath] "
  "WHERE [DBPath].[id]=?";

  const char access::object_traits_impl< ::DBPath, id_mssql >::update_statement[] =
  "UPDATE [DBPath] "
  "SET "
  "[quality_level]=?, "
  "[milage]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBPath, id_mssql >::erase_statement[] =
  "DELETE FROM [DBPath] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBPath, id_mssql >::query_statement[] =
  "SELECT "
  "[DBPath].[id], "
  "[DBPath].[quality_level], "
  "[DBPath].[milage] "
  "FROM [DBPath]";

  const char access::object_traits_impl< ::DBPath, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBPath]";

  const char access::object_traits_impl< ::DBPath, id_mssql >::table_name[] =
  "[DBPath]";

  void access::object_traits_impl< ::DBPath, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // cities
    //
    {
      ::QVector< ::QSharedPointer< ::DBCity > > const& v =
        obj.cities;

      cities_traits::persist (
        v,
        esc.cities);
    }

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // cities
    //
    {
      ::QVector< ::QSharedPointer< ::DBCity > > const& v =
        obj.cities;

      cities_traits::update (
        v,
        esc.cities);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // cities
    //
    cities_traits::erase (
      esc.cities);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBPath, id_mssql >::pointer_type
  access::object_traits_impl< ::DBPath, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBPath, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBPath, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBPath, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  void access::object_traits_impl< ::DBPath, id_mssql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // cities
    //
    {
      ::QVector< ::QSharedPointer< ::DBCity > >& v =
        obj.cities;

      cities_traits::load (
        v,
        esc.cities);
    }
  }

  result< access::object_traits_impl< ::DBPath, id_mssql >::object_type >
  access::object_traits_impl< ::DBPath, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBPath, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBRaceStatistics
  //

  struct access::object_traits_impl< ::DBRaceStatistics, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBRaceStatistics, id_mssql >::id_type
  access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // abs_popularity
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.abs_popularity_value;
    b[n].size_ind = &i.abs_popularity_size_ind;
    n++;

    // derivative_popularity
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.derivative_popularity_value;
    b[n].size_ind = &i.derivative_popularity_size_ind;
    n++;

    // trust_factor
    //
    b[n].type = mssql::bind::float4;
    b[n].buffer = &i.trust_factor_value;
    b[n].size_ind = &i.trust_factor_size_ind;
    b[n].capacity = 24;
    n++;
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // abs_popularity
    //
    {
      ::quint32 const& v =
        o.abs_popularity;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.abs_popularity_value, is_null, v);
      i.abs_popularity_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // derivative_popularity
    //
    {
      ::quint32 const& v =
        o.derivative_popularity;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.derivative_popularity_value, is_null, v);
      i.derivative_popularity_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // trust_factor
    //
    {
      float const& v =
        o.trust_factor;

      bool is_null (false);
      mssql::value_traits<
          float,
          mssql::id_float4 >::set_image (
        i.trust_factor_value, is_null, v);
      i.trust_factor_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // abs_popularity
    //
    {
      ::quint32& v =
        o.abs_popularity;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.abs_popularity_value,
        i.abs_popularity_size_ind == SQL_NULL_DATA);
    }

    // derivative_popularity
    //
    {
      ::quint32& v =
        o.derivative_popularity;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.derivative_popularity_value,
        i.derivative_popularity_size_ind == SQL_NULL_DATA);
    }

    // trust_factor
    //
    {
      float& v =
        o.trust_factor;

      mssql::value_traits<
          float,
          mssql::id_float4 >::set_value (
        v,
        i.trust_factor_value,
        i.trust_factor_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::persist_statement[] =
  "INSERT INTO [DBRaceStatistics] "
  "([id], "
  "[abs_popularity], "
  "[derivative_popularity], "
  "[trust_factor]) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::find_statement[] =
  "SELECT "
  "[DBRaceStatistics].[id], "
  "[DBRaceStatistics].[abs_popularity], "
  "[DBRaceStatistics].[derivative_popularity], "
  "[DBRaceStatistics].[trust_factor] "
  "FROM [DBRaceStatistics] "
  "WHERE [DBRaceStatistics].[id]=?";

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::update_statement[] =
  "UPDATE [DBRaceStatistics] "
  "SET "
  "[abs_popularity]=?, "
  "[derivative_popularity]=?, "
  "[trust_factor]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::erase_statement[] =
  "DELETE FROM [DBRaceStatistics] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::query_statement[] =
  "SELECT "
  "[DBRaceStatistics].[id], "
  "[DBRaceStatistics].[abs_popularity], "
  "[DBRaceStatistics].[derivative_popularity], "
  "[DBRaceStatistics].[trust_factor] "
  "FROM [DBRaceStatistics]";

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBRaceStatistics]";

  const char access::object_traits_impl< ::DBRaceStatistics, id_mssql >::table_name[] =
  "[DBRaceStatistics]";

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBRaceStatistics, id_mssql >::pointer_type
  access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBRaceStatistics, id_mssql >::object_type >
  access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBRaceStatistics, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBRouteStatistics
  //

  struct access::object_traits_impl< ::DBRouteStatistics, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBRouteStatistics, id_mssql >::id_type
  access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // quality_factor
    //
    b[n].type = mssql::bind::float4;
    b[n].buffer = &i.quality_factor_value;
    b[n].size_ind = &i.quality_factor_size_ind;
    b[n].capacity = 24;
    n++;

    // square_coverage
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.square_coverage_value;
    b[n].size_ind = &i.square_coverage_size_ind;
    n++;

    // population_coverage
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.population_coverage_value;
    b[n].size_ind = &i.population_coverage_size_ind;
    n++;
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // quality_factor
    //
    {
      float const& v =
        o.quality_factor;

      bool is_null (false);
      mssql::value_traits<
          float,
          mssql::id_float4 >::set_image (
        i.quality_factor_value, is_null, v);
      i.quality_factor_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // square_coverage
    //
    {
      ::quint32 const& v =
        o.square_coverage;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.square_coverage_value, is_null, v);
      i.square_coverage_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // population_coverage
    //
    {
      ::quint32 const& v =
        o.population_coverage;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.population_coverage_value, is_null, v);
      i.population_coverage_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // quality_factor
    //
    {
      float& v =
        o.quality_factor;

      mssql::value_traits<
          float,
          mssql::id_float4 >::set_value (
        v,
        i.quality_factor_value,
        i.quality_factor_size_ind == SQL_NULL_DATA);
    }

    // square_coverage
    //
    {
      ::quint32& v =
        o.square_coverage;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.square_coverage_value,
        i.square_coverage_size_ind == SQL_NULL_DATA);
    }

    // population_coverage
    //
    {
      ::quint32& v =
        o.population_coverage;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.population_coverage_value,
        i.population_coverage_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::persist_statement[] =
  "INSERT INTO [DBRouteStatistics] "
  "([id], "
  "[quality_factor], "
  "[square_coverage], "
  "[population_coverage]) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::find_statement[] =
  "SELECT "
  "[DBRouteStatistics].[id], "
  "[DBRouteStatistics].[quality_factor], "
  "[DBRouteStatistics].[square_coverage], "
  "[DBRouteStatistics].[population_coverage] "
  "FROM [DBRouteStatistics] "
  "WHERE [DBRouteStatistics].[id]=?";

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::update_statement[] =
  "UPDATE [DBRouteStatistics] "
  "SET "
  "[quality_factor]=?, "
  "[square_coverage]=?, "
  "[population_coverage]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::erase_statement[] =
  "DELETE FROM [DBRouteStatistics] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::query_statement[] =
  "SELECT "
  "[DBRouteStatistics].[id], "
  "[DBRouteStatistics].[quality_factor], "
  "[DBRouteStatistics].[square_coverage], "
  "[DBRouteStatistics].[population_coverage] "
  "FROM [DBRouteStatistics]";

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBRouteStatistics]";

  const char access::object_traits_impl< ::DBRouteStatistics, id_mssql >::table_name[] =
  "[DBRouteStatistics]";

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBRouteStatistics, id_mssql >::pointer_type
  access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBRouteStatistics, id_mssql >::object_type >
  access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBRouteStatistics, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBRoute
  //

  const char alias_traits<  ::DBPath,
    id_mssql,
    access::object_traits_impl< ::DBRoute, id_mssql >::path_tag>::
  table_name[] = "[path]";

  const char alias_traits<  ::DBRouteStatistics,
    id_mssql,
    access::object_traits_impl< ::DBRoute, id_mssql >::statistics_tag>::
  table_name[] = "[statistics]";

  struct access::object_traits_impl< ::DBRoute, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBRoute, id_mssql >::id_type
  access::object_traits_impl< ::DBRoute, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // path
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.path_value;
    b[n].size_ind = &i.path_size_ind;
    n++;

    // statistics
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.statistics_value;
    b[n].size_ind = &i.statistics_size_ind;
    n++;

    // milage
    //
    b[n].type = mssql::bind::float8;
    b[n].buffer = &i.milage_value;
    b[n].size_ind = &i.milage_size_ind;
    b[n].capacity = 53;
    n++;
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // path
    //
    {
      ::QSharedPointer< ::DBPath > const& v =
        o.path;

      typedef object_traits< ::DBPath > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBPath > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.path_value, is_null, id);
        i.path_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.path_size_ind = SQL_NULL_DATA;
    }

    // statistics
    //
    {
      ::QSharedPointer< ::DBRouteStatistics > const& v =
        o.statistics;

      typedef object_traits< ::DBRouteStatistics > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRouteStatistics > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.statistics_value, is_null, id);
        i.statistics_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.statistics_size_ind = SQL_NULL_DATA;
    }

    // milage
    //
    {
      double const& v =
        o.milage;

      bool is_null (false);
      mssql::value_traits<
          double,
          mssql::id_float8 >::set_image (
        i.milage_value, is_null, v);
      i.milage_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // path
    //
    {
      ::QSharedPointer< ::DBPath >& v =
        o.path;

      typedef object_traits< ::DBPath > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBPath > > ptr_traits;

      if (i.path_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.path_value,
          i.path_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // statistics
    //
    {
      ::QSharedPointer< ::DBRouteStatistics >& v =
        o.statistics;

      typedef object_traits< ::DBRouteStatistics > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRouteStatistics > > ptr_traits;

      if (i.statistics_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.statistics_value,
          i.statistics_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // milage
    //
    {
      double& v =
        o.milage;

      mssql::value_traits<
          double,
          mssql::id_float8 >::set_value (
        v,
        i.milage_value,
        i.milage_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBRoute, id_mssql >::persist_statement[] =
  "INSERT INTO [DBRoute] "
  "([id], "
  "[path], "
  "[statistics], "
  "[milage]) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBRoute, id_mssql >::find_statement[] =
  "SELECT "
  "[DBRoute].[id], "
  "[DBRoute].[path], "
  "[DBRoute].[statistics], "
  "[DBRoute].[milage] "
  "FROM [DBRoute] "
  "WHERE [DBRoute].[id]=?";

  const char access::object_traits_impl< ::DBRoute, id_mssql >::update_statement[] =
  "UPDATE [DBRoute] "
  "SET "
  "[path]=?, "
  "[statistics]=?, "
  "[milage]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRoute, id_mssql >::erase_statement[] =
  "DELETE FROM [DBRoute] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRoute, id_mssql >::query_statement[] =
  "SELECT\n"
  "[DBRoute].[id],\n"
  "[DBRoute].[path],\n"
  "[DBRoute].[statistics],\n"
  "[DBRoute].[milage]\n"
  "FROM [DBRoute]\n"
  "LEFT JOIN [DBPath] AS [path] ON [path].[id]=[DBRoute].[path]\n"
  "LEFT JOIN [DBRouteStatistics] AS [statistics] ON [statistics].[id]=[DBRoute].[statistics]";

  const char access::object_traits_impl< ::DBRoute, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBRoute]";

  const char access::object_traits_impl< ::DBRoute, id_mssql >::table_name[] =
  "[DBRoute]";

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBRoute, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBRoute, id_mssql >::pointer_type
  access::object_traits_impl< ::DBRoute, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBRoute, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBRoute, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBRoute, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBRoute, id_mssql >::object_type >
  access::object_traits_impl< ::DBRoute, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBRoute, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBRace
  //

  const char alias_traits<  ::DBRoute,
    id_mssql,
    access::object_traits_impl< ::DBRace, id_mssql >::route_tag>::
  table_name[] = "[route]";

  const char alias_traits<  ::DBBusTypeInfo,
    id_mssql,
    access::object_traits_impl< ::DBRace, id_mssql >::bus_type_info_tag>::
  table_name[] = "[bus_type_info]";

  const char alias_traits<  ::DBRaceStatistics,
    id_mssql,
    access::object_traits_impl< ::DBRace, id_mssql >::statistics_tag>::
  table_name[] = "[statistics]";

  struct access::object_traits_impl< ::DBRace, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBRace, id_mssql >::id_type
  access::object_traits_impl< ::DBRace, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // route
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.route_value;
    b[n].size_ind = &i.route_size_ind;
    n++;

    // bus_type_info
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.bus_type_info_value;
    b[n].size_ind = &i.bus_type_info_size_ind;
    n++;

    // statistics
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.statistics_value;
    b[n].size_ind = &i.statistics_size_ind;
    n++;

    // duration
    //
    b[n].type = mssql::bind::time;
    b[n].buffer = &i.duration_value;
    b[n].size_ind = &i.duration_size_ind;
    b[n].capacity = 3;
    n++;

    // expenses_grivnas
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.expenses_grivnas_value;
    b[n].size_ind = &i.expenses_grivnas_size_ind;
    n++;

    // expenses_coins
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.expenses_coins_value;
    b[n].size_ind = &i.expenses_coins_size_ind;
    n++;

    // ticket_price_grivnas
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.ticket_price_grivnas_value;
    b[n].size_ind = &i.ticket_price_grivnas_size_ind;
    n++;

    // ticket_price_coins
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.ticket_price_coins_value;
    b[n].size_ind = &i.ticket_price_coins_size_ind;
    n++;
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // route
    //
    {
      ::QSharedPointer< ::DBRoute > const& v =
        o.route;

      typedef object_traits< ::DBRoute > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRoute > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.route_value, is_null, id);
        i.route_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.route_size_ind = SQL_NULL_DATA;
    }

    // bus_type_info
    //
    {
      ::QSharedPointer< ::DBBusTypeInfo > const& v =
        o.bus_type_info;

      typedef object_traits< ::DBBusTypeInfo > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBusTypeInfo > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.bus_type_info_value, is_null, id);
        i.bus_type_info_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.bus_type_info_size_ind = SQL_NULL_DATA;
    }

    // statistics
    //
    {
      ::QSharedPointer< ::DBRaceStatistics > const& v =
        o.statistics;

      typedef object_traits< ::DBRaceStatistics > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRaceStatistics > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.statistics_value, is_null, id);
        i.statistics_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.statistics_size_ind = SQL_NULL_DATA;
    }

    // duration
    //
    {
      ::QTime const& v =
        o.duration;

      bool is_null (true);
      mssql::value_traits<
          ::QTime,
          mssql::id_time >::set_image (
        i.duration_value, 3, is_null, v);
      i.duration_size_ind = is_null
        ? SQL_NULL_DATA
        : static_cast<SQLLEN> (sizeof (i.duration_value));
    }

    // expenses_grivnas
    //
    {
      ::quint32 const& v =
        o.expenses_grivnas;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.expenses_grivnas_value, is_null, v);
      i.expenses_grivnas_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // expenses_coins
    //
    {
      ::quint32 const& v =
        o.expenses_coins;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.expenses_coins_value, is_null, v);
      i.expenses_coins_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // ticket_price_grivnas
    //
    {
      ::quint32 const& v =
        o.ticket_price_grivnas;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.ticket_price_grivnas_value, is_null, v);
      i.ticket_price_grivnas_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // ticket_price_coins
    //
    {
      ::quint32 const& v =
        o.ticket_price_coins;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.ticket_price_coins_value, is_null, v);
      i.ticket_price_coins_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // route
    //
    {
      ::QSharedPointer< ::DBRoute >& v =
        o.route;

      typedef object_traits< ::DBRoute > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRoute > > ptr_traits;

      if (i.route_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.route_value,
          i.route_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // bus_type_info
    //
    {
      ::QSharedPointer< ::DBBusTypeInfo >& v =
        o.bus_type_info;

      typedef object_traits< ::DBBusTypeInfo > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBusTypeInfo > > ptr_traits;

      if (i.bus_type_info_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.bus_type_info_value,
          i.bus_type_info_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // statistics
    //
    {
      ::QSharedPointer< ::DBRaceStatistics >& v =
        o.statistics;

      typedef object_traits< ::DBRaceStatistics > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRaceStatistics > > ptr_traits;

      if (i.statistics_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.statistics_value,
          i.statistics_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // duration
    //
    {
      ::QTime& v =
        o.duration;

      mssql::value_traits<
          ::QTime,
          mssql::id_time >::set_value (
        v,
        i.duration_value,
        i.duration_size_ind == SQL_NULL_DATA);
    }

    // expenses_grivnas
    //
    {
      ::quint32& v =
        o.expenses_grivnas;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.expenses_grivnas_value,
        i.expenses_grivnas_size_ind == SQL_NULL_DATA);
    }

    // expenses_coins
    //
    {
      ::quint32& v =
        o.expenses_coins;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.expenses_coins_value,
        i.expenses_coins_size_ind == SQL_NULL_DATA);
    }

    // ticket_price_grivnas
    //
    {
      ::quint32& v =
        o.ticket_price_grivnas;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.ticket_price_grivnas_value,
        i.ticket_price_grivnas_size_ind == SQL_NULL_DATA);
    }

    // ticket_price_coins
    //
    {
      ::quint32& v =
        o.ticket_price_coins;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.ticket_price_coins_value,
        i.ticket_price_coins_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBRace, id_mssql >::persist_statement[] =
  "INSERT INTO [DBRace] "
  "([id], "
  "[route], "
  "[bus_type_info], "
  "[statistics], "
  "[duration], "
  "[expenses_grivnas], "
  "[expenses_coins], "
  "[ticket_price_grivnas], "
  "[ticket_price_coins]) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBRace, id_mssql >::find_statement[] =
  "SELECT "
  "[DBRace].[id], "
  "[DBRace].[route], "
  "[DBRace].[bus_type_info], "
  "[DBRace].[statistics], "
  "[DBRace].[duration], "
  "[DBRace].[expenses_grivnas], "
  "[DBRace].[expenses_coins], "
  "[DBRace].[ticket_price_grivnas], "
  "[DBRace].[ticket_price_coins] "
  "FROM [DBRace] "
  "WHERE [DBRace].[id]=?";

  const char access::object_traits_impl< ::DBRace, id_mssql >::update_statement[] =
  "UPDATE [DBRace] "
  "SET "
  "[route]=?, "
  "[bus_type_info]=?, "
  "[statistics]=?, "
  "[duration]=?, "
  "[expenses_grivnas]=?, "
  "[expenses_coins]=?, "
  "[ticket_price_grivnas]=?, "
  "[ticket_price_coins]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRace, id_mssql >::erase_statement[] =
  "DELETE FROM [DBRace] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBRace, id_mssql >::query_statement[] =
  "SELECT\n"
  "[DBRace].[id],\n"
  "[DBRace].[route],\n"
  "[DBRace].[bus_type_info],\n"
  "[DBRace].[statistics],\n"
  "[DBRace].[duration],\n"
  "[DBRace].[expenses_grivnas],\n"
  "[DBRace].[expenses_coins],\n"
  "[DBRace].[ticket_price_grivnas],\n"
  "[DBRace].[ticket_price_coins]\n"
  "FROM [DBRace]\n"
  "LEFT JOIN [DBRoute] AS [route] ON [route].[id]=[DBRace].[route]\n"
  "LEFT JOIN [DBBusTypeInfo] AS [bus_type_info] ON [bus_type_info].[id]=[DBRace].[bus_type_info]\n"
  "LEFT JOIN [DBRaceStatistics] AS [statistics] ON [statistics].[id]=[DBRace].[statistics]";

  const char access::object_traits_impl< ::DBRace, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBRace]";

  const char access::object_traits_impl< ::DBRace, id_mssql >::table_name[] =
  "[DBRace]";

  void access::object_traits_impl< ::DBRace, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBRace, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBRace, id_mssql >::pointer_type
  access::object_traits_impl< ::DBRace, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBRace, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBRace, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBRace, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBRace, id_mssql >::object_type >
  access::object_traits_impl< ::DBRace, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBRace, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBScheduledRace
  //

  const char alias_traits<  ::DBRace,
    id_mssql,
    access::object_traits_impl< ::DBScheduledRace, id_mssql >::race_tag>::
  table_name[] = "[race]";

  const char alias_traits<  ::DBBus,
    id_mssql,
    access::object_traits_impl< ::DBScheduledRace, id_mssql >::bus_tag>::
  table_name[] = "[bus]";

  struct access::object_traits_impl< ::DBScheduledRace, id_mssql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mssql::connection&,
      image_type&,
      id_image_type&,
      mssql::binding&,
      mssql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBScheduledRace, id_mssql >::id_type
  access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  id (const image_type& i)
  {
    mssql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        id,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    return id;
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  bind (mssql::bind* b,
        image_type& i,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = mssql::bind::int_;
      b[n].buffer = &i.id_value;
      b[n].size_ind = &i.id_size_ind;
      n++;
    }

    // race
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.race_value;
    b[n].size_ind = &i.race_size_ind;
    n++;

    // bus
    //
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.bus_value;
    b[n].size_ind = &i.bus_size_ind;
    n++;

    // departure_time
    //
    b[n].type = mssql::bind::time;
    b[n].buffer = &i.departure_time_value;
    b[n].size_ind = &i.departure_time_size_ind;
    b[n].capacity = 3;
    n++;

    // arrival_time
    //
    b[n].type = mssql::bind::time;
    b[n].buffer = &i.arrival_time_value;
    b[n].size_ind = &i.arrival_time_size_ind;
    b[n].capacity = 3;
    n++;
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  bind (mssql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = mssql::bind::int_;
    b[n].buffer = &i.id_value;
    b[n].size_ind = &i.id_size_ind;
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  init (image_type& i,
        const object_type& o,
        mssql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mssql;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // id
    //
    if (sk == statement_insert)
    {
      ::quint32 const& v =
        o.id;

      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, v);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }

    // race
    //
    {
      ::QSharedPointer< ::DBRace > const& v =
        o.race;

      typedef object_traits< ::DBRace > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRace > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.race_value, is_null, id);
        i.race_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.race_size_ind = SQL_NULL_DATA;
    }

    // bus
    //
    {
      ::QSharedPointer< ::DBBus > const& v =
        o.bus;

      typedef object_traits< ::DBBus > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBus > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_image (
          i.bus_value, is_null, id);
        i.bus_size_ind = is_null ? SQL_NULL_DATA : 0;
      }
      else
        i.bus_size_ind = SQL_NULL_DATA;
    }

    // departure_time
    //
    {
      ::QTime const& v =
        o.departure_time;

      bool is_null (true);
      mssql::value_traits<
          ::QTime,
          mssql::id_time >::set_image (
        i.departure_time_value, 3, is_null, v);
      i.departure_time_size_ind = is_null
        ? SQL_NULL_DATA
        : static_cast<SQLLEN> (sizeof (i.departure_time_value));
    }

    // arrival_time
    //
    {
      ::QTime const& v =
        o.arrival_time;

      bool is_null (true);
      mssql::value_traits<
          ::QTime,
          mssql::id_time >::set_image (
        i.arrival_time_value, 3, is_null, v);
      i.arrival_time_size_ind = is_null
        ? SQL_NULL_DATA
        : static_cast<SQLLEN> (sizeof (i.arrival_time_value));
    }
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint32& v =
        o.id;

      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_value (
        v,
        i.id_value,
        i.id_size_ind == SQL_NULL_DATA);
    }

    // race
    //
    {
      ::QSharedPointer< ::DBRace >& v =
        o.race;

      typedef object_traits< ::DBRace > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBRace > > ptr_traits;

      if (i.race_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.race_value,
          i.race_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // bus
    //
    {
      ::QSharedPointer< ::DBBus >& v =
        o.bus;

      typedef object_traits< ::DBBus > obj_traits;
      typedef odb::pointer_traits< ::QSharedPointer< ::DBBus > > ptr_traits;

      if (i.bus_size_ind == SQL_NULL_DATA)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mssql::value_traits<
            obj_traits::id_type,
            mssql::id_int >::set_value (
          id,
          i.bus_value,
          i.bus_size_ind == SQL_NULL_DATA);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mssql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // departure_time
    //
    {
      ::QTime& v =
        o.departure_time;

      mssql::value_traits<
          ::QTime,
          mssql::id_time >::set_value (
        v,
        i.departure_time_value,
        i.departure_time_size_ind == SQL_NULL_DATA);
    }

    // arrival_time
    //
    {
      ::QTime& v =
        o.arrival_time;

      mssql::value_traits<
          ::QTime,
          mssql::id_time >::set_value (
        v,
        i.arrival_time_value,
        i.arrival_time_size_ind == SQL_NULL_DATA);
    }
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mssql::value_traits<
          ::quint32,
          mssql::id_int >::set_image (
        i.id_value, is_null, id);
      i.id_size_ind = is_null ? SQL_NULL_DATA : 0;
    }
  }

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::persist_statement[] =
  "INSERT INTO [DBScheduledRace] "
  "([id], "
  "[race], "
  "[bus], "
  "[departure_time], "
  "[arrival_time]) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::find_statement[] =
  "SELECT "
  "[DBScheduledRace].[id], "
  "[DBScheduledRace].[race], "
  "[DBScheduledRace].[bus], "
  "[DBScheduledRace].[departure_time], "
  "[DBScheduledRace].[arrival_time] "
  "FROM [DBScheduledRace] "
  "WHERE [DBScheduledRace].[id]=?";

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::update_statement[] =
  "UPDATE [DBScheduledRace] "
  "SET "
  "[race]=?, "
  "[bus]=?, "
  "[departure_time]=?, "
  "[arrival_time]=? "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::erase_statement[] =
  "DELETE FROM [DBScheduledRace] "
  "WHERE [id]=?";

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::query_statement[] =
  "SELECT\n"
  "[DBScheduledRace].[id],\n"
  "[DBScheduledRace].[race],\n"
  "[DBScheduledRace].[bus],\n"
  "[DBScheduledRace].[departure_time],\n"
  "[DBScheduledRace].[arrival_time]\n"
  "FROM [DBScheduledRace]\n"
  "LEFT JOIN [DBRace] AS [race] ON [race].[id]=[DBScheduledRace].[race]\n"
  "LEFT JOIN [DBBus] AS [bus] ON [bus].[id]=[DBScheduledRace].[bus]";

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::erase_query_statement[] =
  "DELETE FROM [DBScheduledRace]";

  const char access::object_traits_impl< ::DBScheduledRace, id_mssql >::table_name[] =
  "[DBScheduledRace]";

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mssql;
    using mssql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mssql::transaction& tr (mssql::transaction::current ());
    mssql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  erase (database& db, const id_type& id)
  {
    using namespace mssql;

    ODB_POTENTIALLY_UNUSED (db);

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBScheduledRace, id_mssql >::pointer_type
  access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  find (database& db, const id_type& id)
  {
    using namespace mssql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    auto_result ar;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();

      ar.set (sts.find_statement ());
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      ar.free ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);
    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  reload (database& db, object_type& obj)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    auto_result ar (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    ar.free ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mssql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r != select_statement::no_data)
    {
      ar.release ();
      return true;
    }
    else
      return false;
  }

  result< access::object_traits_impl< ::DBScheduledRace, id_mssql >::object_type >
  access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  query (database&, const query_base_type& q)
  {
    using namespace mssql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mssql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBScheduledRace, id_mssql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mssql;

    mssql::connection& conn (
      mssql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
