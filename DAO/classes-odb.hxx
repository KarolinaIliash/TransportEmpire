// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CLASSES_ODB_HXX
#define CLASSES_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/mssql/qstring-traits.hxx>
#include <odb/qt/basic/mssql/qbyte-array-traits.hxx>
#include <odb/qt/basic/mssql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/mssql/qdate-traits.hxx>
#include <odb/qt/date-time/mssql/qtime-traits.hxx>
#include <odb/qt/date-time/mssql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "classes.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // DBBusTypeInfo
  //
  template <>
  struct class_traits< ::DBBusTypeInfo >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBBusTypeInfo >
  {
    public:
    typedef ::DBBusTypeInfo object_type;
    typedef ::QSharedPointer< ::DBBusTypeInfo > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBBusState
  //
  template <>
  struct class_traits< ::DBBusState >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBBusState >
  {
    public:
    typedef ::DBBusState object_type;
    typedef ::QSharedPointer< ::DBBusState > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBBus
  //
  template <>
  struct class_traits< ::DBBus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBBus >
  {
    public:
    typedef ::DBBus object_type;
    typedef ::QSharedPointer< ::DBBus > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBCity
  //
  template <>
  struct class_traits< ::DBCity >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBCity >
  {
    public:
    typedef ::DBCity object_type;
    typedef ::QSharedPointer< ::DBCity > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBPath
  //
  template <>
  struct class_traits< ::DBPath >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBPath >
  {
    public:
    typedef ::DBPath object_type;
    typedef ::QSharedPointer< ::DBPath > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBRaceStatistics
  //
  template <>
  struct class_traits< ::DBRaceStatistics >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBRaceStatistics >
  {
    public:
    typedef ::DBRaceStatistics object_type;
    typedef ::QSharedPointer< ::DBRaceStatistics > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBRouteStatistics
  //
  template <>
  struct class_traits< ::DBRouteStatistics >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBRouteStatistics >
  {
    public:
    typedef ::DBRouteStatistics object_type;
    typedef ::QSharedPointer< ::DBRouteStatistics > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBRoute
  //
  template <>
  struct class_traits< ::DBRoute >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBRoute >
  {
    public:
    typedef ::DBRoute object_type;
    typedef ::QSharedPointer< ::DBRoute > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBRace
  //
  template <>
  struct class_traits< ::DBRace >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBRace >
  {
    public:
    typedef ::DBRace object_type;
    typedef ::QSharedPointer< ::DBRace > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBScheduledRace
  //
  template <>
  struct class_traits< ::DBScheduledRace >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::DBScheduledRace >
  {
    public:
    typedef ::DBScheduledRace object_type;
    typedef ::QSharedPointer< ::DBScheduledRace > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint32 id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // DBBusTypeInfo
  //
  template <typename A>
  struct query_columns< ::DBBusTypeInfo, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // brand
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QString,
        mssql::id_string >::query_type,
      mssql::id_string >
    brand_type_;

    static const brand_type_ brand;

    // model
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QString,
        mssql::id_string >::query_type,
      mssql::id_string >
    model_type_;

    static const model_type_ model;

    // fuel_consumption
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    fuel_consumption_type_;

    static const fuel_consumption_type_ fuel_consumption;

    // comfort_level
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    comfort_level_type_;

    static const comfort_level_type_ comfort_level;
  };

  template <typename A>
  const typename query_columns< ::DBBusTypeInfo, id_mssql, A >::id_type_
  query_columns< ::DBBusTypeInfo, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBBusTypeInfo, id_mssql, A >::brand_type_
  query_columns< ::DBBusTypeInfo, id_mssql, A >::
  brand (A::table_name, "[brand]", 0, 512);

  template <typename A>
  const typename query_columns< ::DBBusTypeInfo, id_mssql, A >::model_type_
  query_columns< ::DBBusTypeInfo, id_mssql, A >::
  model (A::table_name, "[model]", 0, 512);

  template <typename A>
  const typename query_columns< ::DBBusTypeInfo, id_mssql, A >::fuel_consumption_type_
  query_columns< ::DBBusTypeInfo, id_mssql, A >::
  fuel_consumption (A::table_name, "[fuel_consumption]", 0);

  template <typename A>
  const typename query_columns< ::DBBusTypeInfo, id_mssql, A >::comfort_level_type_
  query_columns< ::DBBusTypeInfo, id_mssql, A >::
  comfort_level (A::table_name, "[comfort_level]", 0);

  template <typename A>
  struct pointer_query_columns< ::DBBusTypeInfo, id_mssql, A >:
    query_columns< ::DBBusTypeInfo, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBBusTypeInfo, id_mssql >:
    public access::object_traits< ::DBBusTypeInfo >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // brand
      //
      char brand_value[513];
      SQLLEN brand_size_ind;

      // model
      //
      char model_value[513];
      SQLLEN model_size_ind;

      // fuel_consumption
      //
      int fuel_consumption_value;
      SQLLEN fuel_consumption_size_ind;

      // comfort_level
      //
      int comfort_level_value;
      SQLLEN comfort_level_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBBusTypeInfo, id_common >:
    public access::object_traits_impl< ::DBBusTypeInfo, id_mssql >
  {
  };

  // DBBusState
  //
  template <typename A>
  struct query_columns< ::DBBusState, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // durability
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    durability_type_;

    static const durability_type_ durability;

    // last_technical_inspection_date
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QDate,
        mssql::id_date >::query_type,
      mssql::id_date >
    last_technical_inspection_date_type_;

    static const last_technical_inspection_date_type_ last_technical_inspection_date;

    // next_technical_inspection_date
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QDate,
        mssql::id_date >::query_type,
      mssql::id_date >
    next_technical_inspection_date_type_;

    static const next_technical_inspection_date_type_ next_technical_inspection_date;

    // is_avalible
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        bool,
        mssql::id_bit >::query_type,
      mssql::id_bit >
    is_avalible_type_;

    static const is_avalible_type_ is_avalible;
  };

  template <typename A>
  const typename query_columns< ::DBBusState, id_mssql, A >::id_type_
  query_columns< ::DBBusState, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBBusState, id_mssql, A >::durability_type_
  query_columns< ::DBBusState, id_mssql, A >::
  durability (A::table_name, "[durability]", 0);

  template <typename A>
  const typename query_columns< ::DBBusState, id_mssql, A >::last_technical_inspection_date_type_
  query_columns< ::DBBusState, id_mssql, A >::
  last_technical_inspection_date (A::table_name, "[last_technical_inspection_date]", 0);

  template <typename A>
  const typename query_columns< ::DBBusState, id_mssql, A >::next_technical_inspection_date_type_
  query_columns< ::DBBusState, id_mssql, A >::
  next_technical_inspection_date (A::table_name, "[next_technical_inspection_date]", 0);

  template <typename A>
  const typename query_columns< ::DBBusState, id_mssql, A >::is_avalible_type_
  query_columns< ::DBBusState, id_mssql, A >::
  is_avalible (A::table_name, "[is_avalible]", 0);

  template <typename A>
  struct pointer_query_columns< ::DBBusState, id_mssql, A >:
    query_columns< ::DBBusState, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBBusState, id_mssql >:
    public access::object_traits< ::DBBusState >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // durability
      //
      int durability_value;
      SQLLEN durability_size_ind;

      // last_technical_inspection_date
      //
      mssql::date last_technical_inspection_date_value;
      SQLLEN last_technical_inspection_date_size_ind;

      // next_technical_inspection_date
      //
      mssql::date next_technical_inspection_date_value;
      SQLLEN next_technical_inspection_date_size_ind;

      // is_avalible
      //
      unsigned char is_avalible_value;
      SQLLEN is_avalible_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBBusState, id_common >:
    public access::object_traits_impl< ::DBBusState, id_mssql >
  {
  };

  // DBBus
  //
  template <typename A>
  struct pointer_query_columns< ::DBBus, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // info
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    info_type_;

    static const info_type_ info;

    // state
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    state_type_;

    static const state_type_ state;

    // purchase_date
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QDate,
        mssql::id_date >::query_type,
      mssql::id_date >
    purchase_date_type_;

    static const purchase_date_type_ purchase_date;
  };

  template <typename A>
  const typename pointer_query_columns< ::DBBus, id_mssql, A >::id_type_
  pointer_query_columns< ::DBBus, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBBus, id_mssql, A >::info_type_
  pointer_query_columns< ::DBBus, id_mssql, A >::
  info (A::table_name, "[info]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBBus, id_mssql, A >::state_type_
  pointer_query_columns< ::DBBus, id_mssql, A >::
  state (A::table_name, "[state]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBBus, id_mssql, A >::purchase_date_type_
  pointer_query_columns< ::DBBus, id_mssql, A >::
  purchase_date (A::table_name, "[purchase_date]", 0);

  template <>
  class access::object_traits_impl< ::DBBus, id_mssql >:
    public access::object_traits< ::DBBus >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // info
      //
      int info_value;
      SQLLEN info_size_ind;

      // state
      //
      int state_value;
      SQLLEN state_size_ind;

      // purchase_date
      //
      mssql::date purchase_date_value;
      SQLLEN purchase_date_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    struct info_tag;
    struct state_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBBus, id_common >:
    public access::object_traits_impl< ::DBBus, id_mssql >
  {
  };

  // DBCity
  //
  template <typename A>
  struct query_columns< ::DBCity, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QString,
        mssql::id_string >::query_type,
      mssql::id_string >
    name_type_;

    static const name_type_ name;

    // population
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    population_type_;

    static const population_type_ population;

    // location_x
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        float,
        mssql::id_float4 >::query_type,
      mssql::id_float4 >
    location_x_type_;

    static const location_x_type_ location_x;

    // location_y
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        float,
        mssql::id_float4 >::query_type,
      mssql::id_float4 >
    location_y_type_;

    static const location_y_type_ location_y;
  };

  template <typename A>
  const typename query_columns< ::DBCity, id_mssql, A >::id_type_
  query_columns< ::DBCity, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBCity, id_mssql, A >::name_type_
  query_columns< ::DBCity, id_mssql, A >::
  name (A::table_name, "[name]", 0, 512);

  template <typename A>
  const typename query_columns< ::DBCity, id_mssql, A >::population_type_
  query_columns< ::DBCity, id_mssql, A >::
  population (A::table_name, "[population]", 0);

  template <typename A>
  const typename query_columns< ::DBCity, id_mssql, A >::location_x_type_
  query_columns< ::DBCity, id_mssql, A >::
  location_x (A::table_name, "[location_x]", 0, 24);

  template <typename A>
  const typename query_columns< ::DBCity, id_mssql, A >::location_y_type_
  query_columns< ::DBCity, id_mssql, A >::
  location_y (A::table_name, "[location_y]", 0, 24);

  template <typename A>
  struct pointer_query_columns< ::DBCity, id_mssql, A >:
    query_columns< ::DBCity, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBCity, id_mssql >:
    public access::object_traits< ::DBCity >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // name
      //
      char name_value[513];
      SQLLEN name_size_ind;

      // population
      //
      int population_value;
      SQLLEN population_size_ind;

      // location_x
      //
      float location_x_value;
      SQLLEN location_x_size_ind;

      // location_y
      //
      float location_y_value;
      SQLLEN location_y_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBCity, id_common >:
    public access::object_traits_impl< ::DBCity, id_mssql >
  {
  };

  // DBPath
  //
  template <typename A>
  struct query_columns< ::DBPath, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // quality_level
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::qint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    quality_level_type_;

    static const quality_level_type_ quality_level;

    // milage
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        double,
        mssql::id_float8 >::query_type,
      mssql::id_float8 >
    milage_type_;

    static const milage_type_ milage;
  };

  template <typename A>
  const typename query_columns< ::DBPath, id_mssql, A >::id_type_
  query_columns< ::DBPath, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBPath, id_mssql, A >::quality_level_type_
  query_columns< ::DBPath, id_mssql, A >::
  quality_level (A::table_name, "[quality_level]", 0);

  template <typename A>
  const typename query_columns< ::DBPath, id_mssql, A >::milage_type_
  query_columns< ::DBPath, id_mssql, A >::
  milage (A::table_name, "[milage]", 0, 53);

  template <typename A>
  struct pointer_query_columns< ::DBPath, id_mssql, A >:
    query_columns< ::DBPath, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBPath, id_mssql >:
    public access::object_traits< ::DBPath >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // quality_level
      //
      int quality_level_value;
      SQLLEN quality_level_size_ind;

      // milage
      //
      double milage_value;
      SQLLEN milage_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    // cities
    //
    struct cities_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::QVector< ::QSharedPointer< ::DBCity > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mssql::container_statements< cities_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        int index_value;
        SQLLEN index_size_ind;

        // value
        //
        int value_value;
        SQLLEN value_size_ind;

        std::size_t version;
      };

      static void
      bind (mssql::bind*,
            const mssql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBPath, id_common >:
    public access::object_traits_impl< ::DBPath, id_mssql >
  {
  };

  // DBRaceStatistics
  //
  template <typename A>
  struct query_columns< ::DBRaceStatistics, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // abs_popularity
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    abs_popularity_type_;

    static const abs_popularity_type_ abs_popularity;

    // derivative_popularity
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    derivative_popularity_type_;

    static const derivative_popularity_type_ derivative_popularity;

    // trust_factor
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        float,
        mssql::id_float4 >::query_type,
      mssql::id_float4 >
    trust_factor_type_;

    static const trust_factor_type_ trust_factor;
  };

  template <typename A>
  const typename query_columns< ::DBRaceStatistics, id_mssql, A >::id_type_
  query_columns< ::DBRaceStatistics, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBRaceStatistics, id_mssql, A >::abs_popularity_type_
  query_columns< ::DBRaceStatistics, id_mssql, A >::
  abs_popularity (A::table_name, "[abs_popularity]", 0);

  template <typename A>
  const typename query_columns< ::DBRaceStatistics, id_mssql, A >::derivative_popularity_type_
  query_columns< ::DBRaceStatistics, id_mssql, A >::
  derivative_popularity (A::table_name, "[derivative_popularity]", 0);

  template <typename A>
  const typename query_columns< ::DBRaceStatistics, id_mssql, A >::trust_factor_type_
  query_columns< ::DBRaceStatistics, id_mssql, A >::
  trust_factor (A::table_name, "[trust_factor]", 0, 24);

  template <typename A>
  struct pointer_query_columns< ::DBRaceStatistics, id_mssql, A >:
    query_columns< ::DBRaceStatistics, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBRaceStatistics, id_mssql >:
    public access::object_traits< ::DBRaceStatistics >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // abs_popularity
      //
      int abs_popularity_value;
      SQLLEN abs_popularity_size_ind;

      // derivative_popularity
      //
      int derivative_popularity_value;
      SQLLEN derivative_popularity_size_ind;

      // trust_factor
      //
      float trust_factor_value;
      SQLLEN trust_factor_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBRaceStatistics, id_common >:
    public access::object_traits_impl< ::DBRaceStatistics, id_mssql >
  {
  };

  // DBRouteStatistics
  //
  template <typename A>
  struct query_columns< ::DBRouteStatistics, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // quality_factor
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        float,
        mssql::id_float4 >::query_type,
      mssql::id_float4 >
    quality_factor_type_;

    static const quality_factor_type_ quality_factor;

    // square_coverage
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    square_coverage_type_;

    static const square_coverage_type_ square_coverage;

    // population_coverage
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    population_coverage_type_;

    static const population_coverage_type_ population_coverage;
  };

  template <typename A>
  const typename query_columns< ::DBRouteStatistics, id_mssql, A >::id_type_
  query_columns< ::DBRouteStatistics, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBRouteStatistics, id_mssql, A >::quality_factor_type_
  query_columns< ::DBRouteStatistics, id_mssql, A >::
  quality_factor (A::table_name, "[quality_factor]", 0, 24);

  template <typename A>
  const typename query_columns< ::DBRouteStatistics, id_mssql, A >::square_coverage_type_
  query_columns< ::DBRouteStatistics, id_mssql, A >::
  square_coverage (A::table_name, "[square_coverage]", 0);

  template <typename A>
  const typename query_columns< ::DBRouteStatistics, id_mssql, A >::population_coverage_type_
  query_columns< ::DBRouteStatistics, id_mssql, A >::
  population_coverage (A::table_name, "[population_coverage]", 0);

  template <typename A>
  struct pointer_query_columns< ::DBRouteStatistics, id_mssql, A >:
    query_columns< ::DBRouteStatistics, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBRouteStatistics, id_mssql >:
    public access::object_traits< ::DBRouteStatistics >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // quality_factor
      //
      float quality_factor_value;
      SQLLEN quality_factor_size_ind;

      // square_coverage
      //
      int square_coverage_value;
      SQLLEN square_coverage_size_ind;

      // population_coverage
      //
      int population_coverage_value;
      SQLLEN population_coverage_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBRouteStatistics, id_common >:
    public access::object_traits_impl< ::DBRouteStatistics, id_mssql >
  {
  };

  // DBRoute
  //
  template <typename A>
  struct pointer_query_columns< ::DBRoute, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // path
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    path_type_;

    static const path_type_ path;

    // statistics
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    statistics_type_;

    static const statistics_type_ statistics;

    // milage
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        double,
        mssql::id_float8 >::query_type,
      mssql::id_float8 >
    milage_type_;

    static const milage_type_ milage;
  };

  template <typename A>
  const typename pointer_query_columns< ::DBRoute, id_mssql, A >::id_type_
  pointer_query_columns< ::DBRoute, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRoute, id_mssql, A >::path_type_
  pointer_query_columns< ::DBRoute, id_mssql, A >::
  path (A::table_name, "[path]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRoute, id_mssql, A >::statistics_type_
  pointer_query_columns< ::DBRoute, id_mssql, A >::
  statistics (A::table_name, "[statistics]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRoute, id_mssql, A >::milage_type_
  pointer_query_columns< ::DBRoute, id_mssql, A >::
  milage (A::table_name, "[milage]", 0, 53);

  template <>
  class access::object_traits_impl< ::DBRoute, id_mssql >:
    public access::object_traits< ::DBRoute >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // path
      //
      int path_value;
      SQLLEN path_size_ind;

      // statistics
      //
      int statistics_value;
      SQLLEN statistics_size_ind;

      // milage
      //
      double milage_value;
      SQLLEN milage_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    struct path_tag;
    struct statistics_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBRoute, id_common >:
    public access::object_traits_impl< ::DBRoute, id_mssql >
  {
  };

  // DBRace
  //
  template <typename A>
  struct pointer_query_columns< ::DBRace, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // route
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    route_type_;

    static const route_type_ route;

    // bus_type_info
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    bus_type_info_type_;

    static const bus_type_info_type_ bus_type_info;

    // statistics
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    statistics_type_;

    static const statistics_type_ statistics;

    // duration
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QTime,
        mssql::id_time >::query_type,
      mssql::id_time >
    duration_type_;

    static const duration_type_ duration;

    // expenses_grivnas
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    expenses_grivnas_type_;

    static const expenses_grivnas_type_ expenses_grivnas;

    // expenses_coins
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    expenses_coins_type_;

    static const expenses_coins_type_ expenses_coins;

    // ticket_price_grivnas
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    ticket_price_grivnas_type_;

    static const ticket_price_grivnas_type_ ticket_price_grivnas;

    // ticket_price_coins
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    ticket_price_coins_type_;

    static const ticket_price_coins_type_ ticket_price_coins;
  };

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::id_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::route_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  route (A::table_name, "[route]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::bus_type_info_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  bus_type_info (A::table_name, "[bus_type_info]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::statistics_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  statistics (A::table_name, "[statistics]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::duration_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  duration (A::table_name, "[duration]", 0, 0, 3);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::expenses_grivnas_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  expenses_grivnas (A::table_name, "[expenses_grivnas]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::expenses_coins_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  expenses_coins (A::table_name, "[expenses_coins]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::ticket_price_grivnas_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  ticket_price_grivnas (A::table_name, "[ticket_price_grivnas]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBRace, id_mssql, A >::ticket_price_coins_type_
  pointer_query_columns< ::DBRace, id_mssql, A >::
  ticket_price_coins (A::table_name, "[ticket_price_coins]", 0);

  template <>
  class access::object_traits_impl< ::DBRace, id_mssql >:
    public access::object_traits< ::DBRace >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // route
      //
      int route_value;
      SQLLEN route_size_ind;

      // bus_type_info
      //
      int bus_type_info_value;
      SQLLEN bus_type_info_size_ind;

      // statistics
      //
      int statistics_value;
      SQLLEN statistics_size_ind;

      // duration
      //
      mssql::time duration_value;
      SQLLEN duration_size_ind;

      // expenses_grivnas
      //
      int expenses_grivnas_value;
      SQLLEN expenses_grivnas_size_ind;

      // expenses_coins
      //
      int expenses_coins_value;
      SQLLEN expenses_coins_size_ind;

      // ticket_price_grivnas
      //
      int ticket_price_grivnas_value;
      SQLLEN ticket_price_grivnas_size_ind;

      // ticket_price_coins
      //
      int ticket_price_coins_value;
      SQLLEN ticket_price_coins_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    struct route_tag;
    struct bus_type_info_tag;
    struct statistics_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBRace, id_common >:
    public access::object_traits_impl< ::DBRace, id_mssql >
  {
  };

  // DBScheduledRace
  //
  template <typename A>
  struct pointer_query_columns< ::DBScheduledRace, id_mssql, A >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // race
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    race_type_;

    static const race_type_ race;

    // bus
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    bus_type_;

    static const bus_type_ bus;

    // departure_time
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QTime,
        mssql::id_time >::query_type,
      mssql::id_time >
    departure_time_type_;

    static const departure_time_type_ departure_time;

    // arrival_time
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QTime,
        mssql::id_time >::query_type,
      mssql::id_time >
    arrival_time_type_;

    static const arrival_time_type_ arrival_time;
  };

  template <typename A>
  const typename pointer_query_columns< ::DBScheduledRace, id_mssql, A >::id_type_
  pointer_query_columns< ::DBScheduledRace, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBScheduledRace, id_mssql, A >::race_type_
  pointer_query_columns< ::DBScheduledRace, id_mssql, A >::
  race (A::table_name, "[race]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBScheduledRace, id_mssql, A >::bus_type_
  pointer_query_columns< ::DBScheduledRace, id_mssql, A >::
  bus (A::table_name, "[bus]", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBScheduledRace, id_mssql, A >::departure_time_type_
  pointer_query_columns< ::DBScheduledRace, id_mssql, A >::
  departure_time (A::table_name, "[departure_time]", 0, 0, 3);

  template <typename A>
  const typename pointer_query_columns< ::DBScheduledRace, id_mssql, A >::arrival_time_type_
  pointer_query_columns< ::DBScheduledRace, id_mssql, A >::
  arrival_time (A::table_name, "[arrival_time]", 0, 0, 3);

  template <>
  class access::object_traits_impl< ::DBScheduledRace, id_mssql >:
    public access::object_traits< ::DBScheduledRace >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      int id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      int id_value;
      SQLLEN id_size_ind;

      // race
      //
      int race_value;
      SQLLEN race_size_ind;

      // bus
      //
      int bus_value;
      SQLLEN bus_size_ind;

      // departure_time
      //
      mssql::time departure_time_value;
      SQLLEN departure_time_size_ind;

      // arrival_time
      //
      mssql::time arrival_time_value;
      SQLLEN arrival_time_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    struct race_tag;
    struct bus_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::DBScheduledRace, id_common >:
    public access::object_traits_impl< ::DBScheduledRace, id_mssql >
  {
  };

  // DBBusTypeInfo
  //
  // DBBusState
  //
  // DBBus
  //
  template <>
  struct alias_traits<
    ::DBBusTypeInfo,
    id_mssql,
    access::object_traits_impl< ::DBBus, id_mssql >::info_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBBusState,
    id_mssql,
    access::object_traits_impl< ::DBBus, id_mssql >::state_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBBus, id_mssql >
  {
    // info
    //
    typedef
    odb::alias_traits<
      ::DBBusTypeInfo,
      id_mssql,
      access::object_traits_impl< ::DBBus, id_mssql >::info_tag>
    info_alias_;

    // state
    //
    typedef
    odb::alias_traits<
      ::DBBusState,
      id_mssql,
      access::object_traits_impl< ::DBBus, id_mssql >::state_tag>
    state_alias_;
  };

  template <typename A>
  struct query_columns< ::DBBus, id_mssql, A >:
    query_columns_base< ::DBBus, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // info
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    info_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBBusTypeInfo,
        id_mssql,
        info_alias_ > >
    info_pointer_type_;

    struct info_type_: info_pointer_type_, info_column_type_
    {
      info_type_ (const char* t,
                  const char* c,
                  const char* conv,
                  unsigned short p = 0,
                  unsigned short s = 0xFFFF)
        : info_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const info_type_ info;

    // state
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    state_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBBusState,
        id_mssql,
        state_alias_ > >
    state_pointer_type_;

    struct state_type_: state_pointer_type_, state_column_type_
    {
      state_type_ (const char* t,
                   const char* c,
                   const char* conv,
                   unsigned short p = 0,
                   unsigned short s = 0xFFFF)
        : state_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const state_type_ state;

    // purchase_date
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QDate,
        mssql::id_date >::query_type,
      mssql::id_date >
    purchase_date_type_;

    static const purchase_date_type_ purchase_date;
  };

  template <typename A>
  const typename query_columns< ::DBBus, id_mssql, A >::id_type_
  query_columns< ::DBBus, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBBus, id_mssql, A >::info_type_
  query_columns< ::DBBus, id_mssql, A >::
  info (A::table_name, "[info]", 0);

  template <typename A>
  const typename query_columns< ::DBBus, id_mssql, A >::state_type_
  query_columns< ::DBBus, id_mssql, A >::
  state (A::table_name, "[state]", 0);

  template <typename A>
  const typename query_columns< ::DBBus, id_mssql, A >::purchase_date_type_
  query_columns< ::DBBus, id_mssql, A >::
  purchase_date (A::table_name, "[purchase_date]", 0);

  // DBCity
  //
  // DBPath
  //
  // DBRaceStatistics
  //
  // DBRouteStatistics
  //
  // DBRoute
  //
  template <>
  struct alias_traits<
    ::DBPath,
    id_mssql,
    access::object_traits_impl< ::DBRoute, id_mssql >::path_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBRouteStatistics,
    id_mssql,
    access::object_traits_impl< ::DBRoute, id_mssql >::statistics_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBRoute, id_mssql >
  {
    // path
    //
    typedef
    odb::alias_traits<
      ::DBPath,
      id_mssql,
      access::object_traits_impl< ::DBRoute, id_mssql >::path_tag>
    path_alias_;

    // statistics
    //
    typedef
    odb::alias_traits<
      ::DBRouteStatistics,
      id_mssql,
      access::object_traits_impl< ::DBRoute, id_mssql >::statistics_tag>
    statistics_alias_;
  };

  template <typename A>
  struct query_columns< ::DBRoute, id_mssql, A >:
    query_columns_base< ::DBRoute, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // path
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    path_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBPath,
        id_mssql,
        path_alias_ > >
    path_pointer_type_;

    struct path_type_: path_pointer_type_, path_column_type_
    {
      path_type_ (const char* t,
                  const char* c,
                  const char* conv,
                  unsigned short p = 0,
                  unsigned short s = 0xFFFF)
        : path_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const path_type_ path;

    // statistics
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    statistics_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBRouteStatistics,
        id_mssql,
        statistics_alias_ > >
    statistics_pointer_type_;

    struct statistics_type_: statistics_pointer_type_, statistics_column_type_
    {
      statistics_type_ (const char* t,
                        const char* c,
                        const char* conv,
                        unsigned short p = 0,
                        unsigned short s = 0xFFFF)
        : statistics_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const statistics_type_ statistics;

    // milage
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        double,
        mssql::id_float8 >::query_type,
      mssql::id_float8 >
    milage_type_;

    static const milage_type_ milage;
  };

  template <typename A>
  const typename query_columns< ::DBRoute, id_mssql, A >::id_type_
  query_columns< ::DBRoute, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBRoute, id_mssql, A >::path_type_
  query_columns< ::DBRoute, id_mssql, A >::
  path (A::table_name, "[path]", 0);

  template <typename A>
  const typename query_columns< ::DBRoute, id_mssql, A >::statistics_type_
  query_columns< ::DBRoute, id_mssql, A >::
  statistics (A::table_name, "[statistics]", 0);

  template <typename A>
  const typename query_columns< ::DBRoute, id_mssql, A >::milage_type_
  query_columns< ::DBRoute, id_mssql, A >::
  milage (A::table_name, "[milage]", 0, 53);

  // DBRace
  //
  template <>
  struct alias_traits<
    ::DBRoute,
    id_mssql,
    access::object_traits_impl< ::DBRace, id_mssql >::route_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBBusTypeInfo,
    id_mssql,
    access::object_traits_impl< ::DBRace, id_mssql >::bus_type_info_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBRaceStatistics,
    id_mssql,
    access::object_traits_impl< ::DBRace, id_mssql >::statistics_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBRace, id_mssql >
  {
    // route
    //
    typedef
    odb::alias_traits<
      ::DBRoute,
      id_mssql,
      access::object_traits_impl< ::DBRace, id_mssql >::route_tag>
    route_alias_;

    // bus_type_info
    //
    typedef
    odb::alias_traits<
      ::DBBusTypeInfo,
      id_mssql,
      access::object_traits_impl< ::DBRace, id_mssql >::bus_type_info_tag>
    bus_type_info_alias_;

    // statistics
    //
    typedef
    odb::alias_traits<
      ::DBRaceStatistics,
      id_mssql,
      access::object_traits_impl< ::DBRace, id_mssql >::statistics_tag>
    statistics_alias_;
  };

  template <typename A>
  struct query_columns< ::DBRace, id_mssql, A >:
    query_columns_base< ::DBRace, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // route
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    route_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBRoute,
        id_mssql,
        route_alias_ > >
    route_pointer_type_;

    struct route_type_: route_pointer_type_, route_column_type_
    {
      route_type_ (const char* t,
                   const char* c,
                   const char* conv,
                   unsigned short p = 0,
                   unsigned short s = 0xFFFF)
        : route_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const route_type_ route;

    // bus_type_info
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    bus_type_info_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBBusTypeInfo,
        id_mssql,
        bus_type_info_alias_ > >
    bus_type_info_pointer_type_;

    struct bus_type_info_type_: bus_type_info_pointer_type_, bus_type_info_column_type_
    {
      bus_type_info_type_ (const char* t,
                           const char* c,
                           const char* conv,
                           unsigned short p = 0,
                           unsigned short s = 0xFFFF)
        : bus_type_info_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const bus_type_info_type_ bus_type_info;

    // statistics
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    statistics_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBRaceStatistics,
        id_mssql,
        statistics_alias_ > >
    statistics_pointer_type_;

    struct statistics_type_: statistics_pointer_type_, statistics_column_type_
    {
      statistics_type_ (const char* t,
                        const char* c,
                        const char* conv,
                        unsigned short p = 0,
                        unsigned short s = 0xFFFF)
        : statistics_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const statistics_type_ statistics;

    // duration
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QTime,
        mssql::id_time >::query_type,
      mssql::id_time >
    duration_type_;

    static const duration_type_ duration;

    // expenses_grivnas
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    expenses_grivnas_type_;

    static const expenses_grivnas_type_ expenses_grivnas;

    // expenses_coins
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    expenses_coins_type_;

    static const expenses_coins_type_ expenses_coins;

    // ticket_price_grivnas
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    ticket_price_grivnas_type_;

    static const ticket_price_grivnas_type_ ticket_price_grivnas;

    // ticket_price_coins
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    ticket_price_coins_type_;

    static const ticket_price_coins_type_ ticket_price_coins;
  };

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::id_type_
  query_columns< ::DBRace, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::route_type_
  query_columns< ::DBRace, id_mssql, A >::
  route (A::table_name, "[route]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::bus_type_info_type_
  query_columns< ::DBRace, id_mssql, A >::
  bus_type_info (A::table_name, "[bus_type_info]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::statistics_type_
  query_columns< ::DBRace, id_mssql, A >::
  statistics (A::table_name, "[statistics]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::duration_type_
  query_columns< ::DBRace, id_mssql, A >::
  duration (A::table_name, "[duration]", 0, 0, 3);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::expenses_grivnas_type_
  query_columns< ::DBRace, id_mssql, A >::
  expenses_grivnas (A::table_name, "[expenses_grivnas]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::expenses_coins_type_
  query_columns< ::DBRace, id_mssql, A >::
  expenses_coins (A::table_name, "[expenses_coins]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::ticket_price_grivnas_type_
  query_columns< ::DBRace, id_mssql, A >::
  ticket_price_grivnas (A::table_name, "[ticket_price_grivnas]", 0);

  template <typename A>
  const typename query_columns< ::DBRace, id_mssql, A >::ticket_price_coins_type_
  query_columns< ::DBRace, id_mssql, A >::
  ticket_price_coins (A::table_name, "[ticket_price_coins]", 0);

  // DBScheduledRace
  //
  template <>
  struct alias_traits<
    ::DBRace,
    id_mssql,
    access::object_traits_impl< ::DBScheduledRace, id_mssql >::race_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBBus,
    id_mssql,
    access::object_traits_impl< ::DBScheduledRace, id_mssql >::bus_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBScheduledRace, id_mssql >
  {
    // race
    //
    typedef
    odb::alias_traits<
      ::DBRace,
      id_mssql,
      access::object_traits_impl< ::DBScheduledRace, id_mssql >::race_tag>
    race_alias_;

    // bus
    //
    typedef
    odb::alias_traits<
      ::DBBus,
      id_mssql,
      access::object_traits_impl< ::DBScheduledRace, id_mssql >::bus_tag>
    bus_alias_;
  };

  template <typename A>
  struct query_columns< ::DBScheduledRace, id_mssql, A >:
    query_columns_base< ::DBScheduledRace, id_mssql >
  {
    // id
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    id_type_;

    static const id_type_ id;

    // race
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    race_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBRace,
        id_mssql,
        race_alias_ > >
    race_pointer_type_;

    struct race_type_: race_pointer_type_, race_column_type_
    {
      race_type_ (const char* t,
                  const char* c,
                  const char* conv,
                  unsigned short p = 0,
                  unsigned short s = 0xFFFF)
        : race_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const race_type_ race;

    // bus
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::quint32,
        mssql::id_int >::query_type,
      mssql::id_int >
    bus_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBBus,
        id_mssql,
        bus_alias_ > >
    bus_pointer_type_;

    struct bus_type_: bus_pointer_type_, bus_column_type_
    {
      bus_type_ (const char* t,
                 const char* c,
                 const char* conv,
                 unsigned short p = 0,
                 unsigned short s = 0xFFFF)
        : bus_column_type_ (t, c, conv, p, s)
      {
      }
    };

    static const bus_type_ bus;

    // departure_time
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QTime,
        mssql::id_time >::query_type,
      mssql::id_time >
    departure_time_type_;

    static const departure_time_type_ departure_time;

    // arrival_time
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::QTime,
        mssql::id_time >::query_type,
      mssql::id_time >
    arrival_time_type_;

    static const arrival_time_type_ arrival_time;
  };

  template <typename A>
  const typename query_columns< ::DBScheduledRace, id_mssql, A >::id_type_
  query_columns< ::DBScheduledRace, id_mssql, A >::
  id (A::table_name, "[id]", 0);

  template <typename A>
  const typename query_columns< ::DBScheduledRace, id_mssql, A >::race_type_
  query_columns< ::DBScheduledRace, id_mssql, A >::
  race (A::table_name, "[race]", 0);

  template <typename A>
  const typename query_columns< ::DBScheduledRace, id_mssql, A >::bus_type_
  query_columns< ::DBScheduledRace, id_mssql, A >::
  bus (A::table_name, "[bus]", 0);

  template <typename A>
  const typename query_columns< ::DBScheduledRace, id_mssql, A >::departure_time_type_
  query_columns< ::DBScheduledRace, id_mssql, A >::
  departure_time (A::table_name, "[departure_time]", 0, 0, 3);

  template <typename A>
  const typename query_columns< ::DBScheduledRace, id_mssql, A >::arrival_time_type_
  query_columns< ::DBScheduledRace, id_mssql, A >::
  arrival_time (A::table_name, "[arrival_time]", 0, 0, 3);
}

#include "classes-odb.ixx"

#include <odb/post.hxx>

#endif // CLASSES_ODB_HXX
